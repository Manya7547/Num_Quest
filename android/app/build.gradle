plugins {
    // Keep these lines; the actual version is now controlled in settings.gradle
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

android {
    // If you want to hardcode these, you can do:
    // compileSdk 35
    // targetSdkVersion 35
    // Otherwise, ensure flutter.compileSdkVersion = 35 in your Flutter config.
    namespace "com.example.num_quest"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Make sure your Kotlin JVM target is at least 1.8
    kotlinOptions {
        jvmTarget = '1.8'
        // Optional: if you absolutely must bypass mismatched metadata checks:
        // freeCompilerArgs += ["-Xskip-metadata-version-check"]
    }

    defaultConfig {
        applicationId "com.example.num_quest"

        // If flutter.targetSdkVersion is set to 35, this will be 35 automatically.
        // Otherwise, you can hardcode targetSdkVersion(35) here.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // For demonstration only; use a real signing config in production
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    // Add any additional dependencies here
}
